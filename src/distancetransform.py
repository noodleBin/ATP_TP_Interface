#!/usr/bin/env python
# -*- coding: utf-8 -*-
# generated by wxGlade 0.6.3 on Mon Aug 15 11:52:58 2011

import wx
from base.senariopreproccess import  Senariopreproccess
from base import commlib
from base import simdata
# begin wxGlade: extracode
# end wxGlade



class MyFrame( wx.Frame ):
    
    __PreSce = None
    __trainInfo = None
    
    def __init__( self, *args, **kwds ):
        # begin wxGlade: MyFrame.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__( self, *args, **kwds )
        self.panel_1 = wx.Panel( self, -1 )
        self.label_1 = wx.StaticText( self.panel_1, -1, u"车辆坐标(毫米)" )
        self.text_ctrl_1 = wx.TextCtrl( self.panel_1, -1, "" )
        self.button_1 = wx.Button( self.panel_1, -1, "-->" )
        self.label_2 = wx.StaticText( self.panel_1, -1, "BlockID" )
        self.text_ctrl_2 = wx.TextCtrl( self.panel_1, -1, "" )
        self.label_4 = wx.StaticText( self.panel_1, -1, "" )
        self.label_5 = wx.StaticText( self.panel_1, -1, "" )
        self.button_2 = wx.Button( self.panel_1, -1, "<--" )
        self.label_3 = wx.StaticText( self.panel_1, -1, u"Absicssa(毫米)" )
        self.text_ctrl_3 = wx.TextCtrl( self.panel_1, -1, "" )

        self.__set_properties()
        self.__do_layout()

        self.Bind( wx.EVT_BUTTON, self.onTrain2Block, self.button_1 )
        self.Bind( wx.EVT_BUTTON, self.onBlock2Train, self.button_2 )
        # end wxGlade
        
        #初始化计算距离所需的数据
        simdata.MapData.loadMapData( r'./datafile/atpCpu1Binary.txt',
                                    r'./datafile/atpText.txt',
                                    Type = "Edit" )
        simdata.TrainRoute.loadTrainData( r'./scenario/train_route.xml',
                                          Type = "Edit" )
#        self.__PreSce = Senariopreproccess(r'./scenario/train_route.xml')
#        self.__trainInfo = commlib.loadTrainRout(r'./scenario/train_route.xml')
#        self.__PreSce.getblockinfolist(r'./datafile/atpCpu1Binary.txt', r'./datafile/atpText.txt')

    def __set_properties( self ):
        # begin wxGlade: MyFrame.__set_properties
        self.SetTitle( u"坐标转换工具" )
        # end wxGlade

    def __do_layout( self ):
        # begin wxGlade: MyFrame.__do_layout
        sizer_1 = wx.BoxSizer( wx.VERTICAL )
        grid_sizer_1 = wx.GridSizer( 2, 5, 0, 0 )
        grid_sizer_1.Add( self.label_1, 0, 0, 0 )
        grid_sizer_1.Add( self.text_ctrl_1, 0, 0, 0 )
        grid_sizer_1.Add( self.button_1, 0, 0, 0 )
        grid_sizer_1.Add( self.label_2, 0, 0, 0 )
        grid_sizer_1.Add( self.text_ctrl_2, 0, 0, 0 )
        grid_sizer_1.Add( self.label_4, 0, 0, 0 )
        grid_sizer_1.Add( self.label_5, 0, 0, 0 )
        grid_sizer_1.Add( self.button_2, 0, 0, 0 )
        grid_sizer_1.Add( self.label_3, 0, 0, 0 )
        grid_sizer_1.Add( self.text_ctrl_3, 0, 0, 0 )
        self.panel_1.SetSizer( grid_sizer_1 )
        sizer_1.Add( self.panel_1, 1, wx.EXPAND, 0 )
        self.SetSizer( sizer_1 )
        sizer_1.Fit( self )
        self.Layout()
        # end wxGlade

    def onTrain2Block( self, event ): # wxGlade: MyFrame.<event_handler>
        #print "Event handler `onTrain2Block' not implemented"
        #event.Skip()
        _ablocation = int( self.text_ctrl_1.GetValue() )
        _blockid, _abscissa = simdata.TrainRoute.getBlockandAbs( _ablocation,
                                                                 Type = "Edit" )
        

        
        self.text_ctrl_2.SetValue( str( _blockid ) )
        self.text_ctrl_3.SetValue( str( _abscissa ) )

    def onBlock2Train( self, event ): # wxGlade: MyFrame.<event_handler>
        #print "Event handler `onBlock2Train' not implemented"
        _blockid = int( self.text_ctrl_2.GetValue() )
        _abscissa = int( self.text_ctrl_3.GetValue() )

        _ablocation = simdata.TrainRoute.getabsolutedistance( _blockid,
                                                              _abscissa,
                                                              Type = "Edit" )
        self.text_ctrl_1.SetValue( str( _ablocation ) )

# end of class MyFrame


if __name__ == "__main__":
    app = wx.PySimpleApp( 0 )
    wx.InitAllImageHandlers()
    frame_1 = MyFrame( None, -1, "" )
    app.SetTopWindow( frame_1 )
    frame_1.Show()
    app.MainLoop()
